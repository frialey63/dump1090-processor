import static org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
  ext {
    springBootVersion = '2.4.2'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

plugins {
//  id 'org.assertj.generator' version '0.0.6b'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'org.codebrewer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

//sourceSets {
//  main {
//    java {
//      assertJ {
//      }
//    }
//  }
//}

repositories {
  mavenCentral()
  maven {
    url = 'https://repo.osgeo.org/repository/release'
  }
}

ext['hibernate.version'] = '5.4.27.Final'

dependencies {
  implementation('org.hibernate:hibernate-spatial:5.4.27.Final')
  implementation('org.springframework.boot:spring-boot-starter-actuator')
  implementation('org.springframework.boot:spring-boot-starter-data-jpa')
  implementation('org.springframework.boot:spring-boot-starter-integration')
  implementation('org.springframework.boot:spring-boot-starter-web')
  implementation('org.springframework.integration:spring-integration-ip')
  runtimeOnly('org.opengeo:geodb:0.9')
  testImplementation('org.springframework.boot:spring-boot-starter-test')
  testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.0')
  testImplementation('org.mockito:mockito-junit-jupiter:3.7.7')
  testImplementation('org.assertj:assertj-core:3.19.0')
  testImplementation('com.openpojo:openpojo:0.8.13')
  testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.0')
}

jacocoTestReport {
  reports {
    csv.enabled = false
    html.enabled = true
    xml.enabled = true
  }

  afterEvaluate {
    getClassDirectories().setFrom(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
              'org/codebrewer/dump1090processor/Dump1090ProcessorApplication.class'
      ])
    })
  }
}

test {
  finalizedBy jacocoTestReport
  useJUnitPlatform()
}

wrapper {
  distributionType = DistributionType.ALL
}
